# -*- coding: utf-8 -*-
"""Read_RRI.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kYF30zd1fPzFCMyr5haq_9Ieis71xz1M
"""

# RRIデータを読み込み

import matplotlib.pyplot as plt
import sys
import datetime
import numpy as np


# RRI_max = 1250
# RRI_min = 350
# RRI_diff = 150
# dt = 0.5

def read_RRI(name, RRI_max, RRI_min, RRI_diff, dt):
  nums = []  # 整数を入れるリスト

  with open(name, 'r', encoding='utf-8') as fin:  # ファイルを開く
    for line in fin.readlines():  # 行を読み込んでfor文で回す
        try:
            line = line.replace('\n','')
            num = int(float(line))  # 行を整数（int）に変換する
        except ValueError as e:
            print(e, file=sys.stderr)  # エラーが出たら画面に出力
            continue

        nums.append(num)  # 変換した整数をリストに保存する


  # 日付の取得（もっといいやり方があるはず)
  f = open(name, 'r', encoding='utf-8')
  tstr = f.readline()
  try:
    tstr = tstr.replace('\n','')
    timestart = datetime.datetime.strptime(tstr, '%H:%M:%S')
  except:
    timestart = datetime.datetime(2016, 1, 1, 9, 0, 0)

  time_RRI = []  # 時刻データを入れるリスト
  time_RRI2 = [] # 経過時間(ms)

  timecount = 0
  for i in range(len(nums)):
    timecount = timecount + nums[i]/1000  # second
    time_RRI2.append(timecount)  # second
    time = timestart + datetime.timedelta(seconds=round(timecount,2))
    time_RRI.append(time)

  f.close()

  plt.plot(time_RRI2,nums)
  plt.show()

  print(time_RRI[-1])


  # RRIデータのクリーニング

  # リストをnumpy配列に変換(これをしないとif文の不等号でエラーが発生する)
  time_RRI2x = np.array(time_RRI2)
  numsx = np.array(nums)
  time_RRI2 = time_RRI2x
  nums = numsx
  print(nums)

  cleaning_counter = 0
  RRI_cleaning = np.empty(0)
  time_RRIa = []  # リスト型(日付時刻データのため)
  time_RRI2a = np.empty(0)

  for i in range(len(nums)):
    if RRI_min < nums[i] and nums[i] < RRI_max:
      RRI_cleaning = np.append(RRI_cleaning,nums[i]) 
      time_RRIa.append(time_RRI[i])  # リスト型
      time_RRI2a = np.append(time_RRI2a,time_RRI2[i])
    else:
      cleaning_counter += 1  # クリーニングで消去した要素数を数える

  nums = RRI_cleaning
  time_RRI = time_RRIa
  time_RRI2 = time_RRI2a

  RRI_cleaning = np.empty(0)
  time_RRIa = []  # リスト型(日付時刻データのため)
  time_RRI2a = np.empty(0)

  cleaning_counter = 0
  for i in range(len(nums)-1):   #範囲を超えないように-1する
    if nums[i+1] - nums[i] < RRI_diff:
      RRI_cleaning = np.append(RRI_cleaning,nums[i]) 
      time_RRIa.append(time_RRI[i])  # リスト型
      time_RRI2a = np.append(time_RRI2a,time_RRI2[i])
    else:
      cleaning_counter += 1  # クリーニングで消去した要素数を数える

  time_RRI2 = time_RRI2a
  nums = RRI_cleaning
  time_RRI = time_RRIa

  # クリーニング後のリサンプリング

  T_samp = datetime.timedelta(seconds = 0.5)  # second
  samp_len = int(time_RRI2[-1] / dt)  # サンプリング数
  t_resamp = [timestart + x * T_samp for x in range(samp_len)]  # リサンプリング点での時刻データ

  # interp関数はdatetime型を受け付けない
  # 時刻をdatetime型からunix時間（float）に変換する
  t_unix = [x.timestamp() for x in time_RRI]
  t_new_unix = [x.timestamp() for x in t_resamp]

  RRI_resamp = np.interp(t_new_unix, t_unix, RRI_cleaning)

  # データ表示
  plt.plot(t_resamp, RRI_resamp)
  plt.show()
  return (t_resamp, RRI_resamp)


# name = '48hlt011.rri'
# RRI_max = 1250
# RRI_min = 350
# RRI_diff = 150
# dt = 0.5   # second

# t_resamp, RRI_resamp = read_RRI(name, RRI_max, RRI_min, RRI_diff, dt)